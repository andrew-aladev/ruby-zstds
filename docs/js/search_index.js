var search_data = {"index":{"searchIndex":["zstds","accessioerror","allocateerror","baseerror","corrupteddictionaryerror","decompressorcorruptedsourceerror","dictionary","file","notenoughdestinationbuffererror","notenoughdestinationerror","notenoughsourcebuffererror","notimplementederror","option","readioerror","stream","abstract","delegates","raw","abstract","compressor","decompressor","reader","readerhelpers","classmethods","stat","writer","writerhelpers","classmethods","string","unexpectederror","usedaftercloseerror","validateerror","validation","writeioerror","<<()","advise()","append_io_data()","close()","close()","close()","close()","close()","close()","close_nonblock()","closed?()","closed?()","compress()","compress()","create_raw_stream()","create_raw_stream()","decompress()","decompress()","do_not_use_after_close()","each()","each_byte()","each_char()","each_line()","each_string()","empty?()","eof?()","finalize()","finish()","finish_nonblock()","flush()","flush()","flush()","flush()","flush_io_data()","flush_nonblock()","get_compressor_options()","get_decompressor_options()","getbyte()","getc()","gets()","header_size()","id()","included()","included()","included()","initialize_source_buffer_length()","more_destination()","new()","new()","new()","new()","new()","new()","new()","new()","open()","open()","print()","printf()","process_set_encoding_arguments()","putc()","puts()","raw_nonblock_wrapper()","raw_wrapper()","raw_wrapper()","read()","read()","read_buffer()","read_bytes_from_buffer()","read_more_nonblock()","read_nonblock()","readbyte()","readchar()","readline()","readlines()","readpartial()","readstring()","reset_buffer()","reset_io_advise()","reset_io_remainder()","reset_need_to_flush()","rewind()","rewind()","rewind()","rewind_nonblock()","set_encoding()","set_target_encoding()","target_encoding()","to_io()","train()","transcode()","transcode_to_external()","transcode_to_internal()","ungetbyte()","ungetc()","ungetline()","ungetstring()","validate_array()","validate_bool()","validate_hash()","validate_integer()","validate_not_negative_integer()","validate_positive_integer()","validate_proc()","validate_samples()","validate_string()","validate_symbol()","validate_write()","validate_write_nonblock()","write()","write()","write_nonblock()","write_remaining_buffer()","write_remaining_buffer_nonblock()","write_result()","authors","license","readme"],"longSearchIndex":["zstds","zstds::accessioerror","zstds::allocateerror","zstds::baseerror","zstds::corrupteddictionaryerror","zstds::decompressorcorruptedsourceerror","zstds::dictionary","zstds::file","zstds::notenoughdestinationbuffererror","zstds::notenoughdestinationerror","zstds::notenoughsourcebuffererror","zstds::notimplementederror","zstds::option","zstds::readioerror","zstds::stream","zstds::stream::abstract","zstds::stream::delegates","zstds::stream::raw","zstds::stream::raw::abstract","zstds::stream::raw::compressor","zstds::stream::raw::decompressor","zstds::stream::reader","zstds::stream::readerhelpers","zstds::stream::readerhelpers::classmethods","zstds::stream::stat","zstds::stream::writer","zstds::stream::writerhelpers","zstds::stream::writerhelpers::classmethods","zstds::string","zstds::unexpectederror","zstds::usedaftercloseerror","zstds::validateerror","zstds::validation","zstds::writeioerror","zstds::stream::writerhelpers#<<()","zstds::stream::abstract#advise()","zstds::stream::reader#append_io_data()","zstds::stream::abstract#close()","zstds::stream::raw::abstract#close()","zstds::stream::raw::compressor#close()","zstds::stream::raw::decompressor#close()","zstds::stream::reader#close()","zstds::stream::writer#close()","zstds::stream::writer#close_nonblock()","zstds::stream::abstract#closed?()","zstds::stream::raw::abstract#closed?()","zstds::file::compress()","zstds::string::compress()","zstds::stream::reader#create_raw_stream()","zstds::stream::writer#create_raw_stream()","zstds::file::decompress()","zstds::string::decompress()","zstds::stream::raw::abstract#do_not_use_after_close()","zstds::stream::readerhelpers#each()","zstds::stream::readerhelpers#each_byte()","zstds::stream::readerhelpers#each_char()","zstds::stream::readerhelpers#each_line()","zstds::stream::readerhelpers#each_string()","zstds::stream::reader#empty?()","zstds::stream::reader#eof?()","zstds::dictionary::finalize()","zstds::stream::writer#finish()","zstds::stream::writer#finish_nonblock()","zstds::stream::raw::abstract#flush()","zstds::stream::raw::compressor#flush()","zstds::stream::raw::decompressor#flush()","zstds::stream::writer#flush()","zstds::stream::reader#flush_io_data()","zstds::stream::writer#flush_nonblock()","zstds::option::get_compressor_options()","zstds::option::get_decompressor_options()","zstds::stream::readerhelpers#getbyte()","zstds::stream::readerhelpers#getc()","zstds::stream::readerhelpers#gets()","zstds::dictionary#header_size()","zstds::dictionary#id()","zstds::stream::delegates::included()","zstds::stream::readerhelpers::included()","zstds::stream::writerhelpers::included()","zstds::stream::reader#initialize_source_buffer_length()","zstds::stream::raw::abstract#more_destination()","zstds::dictionary::new()","zstds::stream::abstract::new()","zstds::stream::raw::abstract::new()","zstds::stream::raw::compressor::new()","zstds::stream::raw::decompressor::new()","zstds::stream::reader::new()","zstds::stream::stat::new()","zstds::stream::writer::new()","zstds::stream::readerhelpers::classmethods#open()","zstds::stream::writerhelpers::classmethods#open()","zstds::stream::writerhelpers#print()","zstds::stream::writerhelpers#printf()","zstds::stream::abstract#process_set_encoding_arguments()","zstds::stream::writerhelpers#putc()","zstds::stream::writerhelpers#puts()","zstds::stream::writer#raw_nonblock_wrapper()","zstds::stream::reader#raw_wrapper()","zstds::stream::writer#raw_wrapper()","zstds::stream::raw::decompressor#read()","zstds::stream::reader#read()","zstds::stream::reader#read_buffer()","zstds::stream::reader#read_bytes_from_buffer()","zstds::stream::reader#read_more_nonblock()","zstds::stream::reader#read_nonblock()","zstds::stream::readerhelpers#readbyte()","zstds::stream::readerhelpers#readchar()","zstds::stream::readerhelpers#readline()","zstds::stream::readerhelpers#readlines()","zstds::stream::reader#readpartial()","zstds::stream::readerhelpers#readstring()","zstds::stream::abstract#reset_buffer()","zstds::stream::abstract#reset_io_advise()","zstds::stream::reader#reset_io_remainder()","zstds::stream::reader#reset_need_to_flush()","zstds::stream::abstract#rewind()","zstds::stream::reader#rewind()","zstds::stream::writer#rewind()","zstds::stream::writer#rewind_nonblock()","zstds::stream::abstract#set_encoding()","zstds::stream::abstract#set_target_encoding()","zstds::stream::abstract#target_encoding()","zstds::stream::abstract#to_io()","zstds::dictionary::train()","zstds::stream::writer#transcode()","zstds::stream::reader#transcode_to_external()","zstds::stream::reader#transcode_to_internal()","zstds::stream::readerhelpers#ungetbyte()","zstds::stream::readerhelpers#ungetc()","zstds::stream::readerhelpers#ungetline()","zstds::stream::readerhelpers#ungetstring()","zstds::validation::validate_array()","zstds::validation::validate_bool()","zstds::validation::validate_hash()","zstds::validation::validate_integer()","zstds::validation::validate_not_negative_integer()","zstds::validation::validate_positive_integer()","zstds::validation::validate_proc()","zstds::dictionary::validate_samples()","zstds::validation::validate_string()","zstds::validation::validate_symbol()","zstds::stream::writer#validate_write()","zstds::stream::writer#validate_write_nonblock()","zstds::stream::raw::compressor#write()","zstds::stream::writer#write()","zstds::stream::writer#write_nonblock()","zstds::stream::writer#write_remaining_buffer()","zstds::stream::writer#write_remaining_buffer_nonblock()","zstds::stream::raw::abstract#write_result()","","",""],"info":[["ZSTDS","","ZSTDS.html","","<p>Ruby bindings for zstd library. Copyright © 2019 AUTHORS, MIT License.\n<p>Ruby bindings for zstd library. …\n"],["ZSTDS::AccessIOError","","ZSTDS/AccessIOError.html","",""],["ZSTDS::AllocateError","","ZSTDS/AllocateError.html","",""],["ZSTDS::BaseError","","ZSTDS/BaseError.html","",""],["ZSTDS::CorruptedDictionaryError","","ZSTDS/CorruptedDictionaryError.html","",""],["ZSTDS::DecompressorCorruptedSourceError","","ZSTDS/DecompressorCorruptedSourceError.html","",""],["ZSTDS::Dictionary","","ZSTDS/Dictionary.html","","<p>ZSTDS::Dictionary class.\n"],["ZSTDS::File","","ZSTDS/File.html","","<p>ZSTDS::File module.\n"],["ZSTDS::NotEnoughDestinationBufferError","","ZSTDS/NotEnoughDestinationBufferError.html","",""],["ZSTDS::NotEnoughDestinationError","","ZSTDS/NotEnoughDestinationError.html","",""],["ZSTDS::NotEnoughSourceBufferError","","ZSTDS/NotEnoughSourceBufferError.html","",""],["ZSTDS::NotImplementedError","","ZSTDS/NotImplementedError.html","",""],["ZSTDS::Option","","ZSTDS/Option.html","","<p>ZSTDS::Option module.\n"],["ZSTDS::ReadIOError","","ZSTDS/ReadIOError.html","",""],["ZSTDS::Stream","","ZSTDS/Stream.html","",""],["ZSTDS::Stream::Abstract","","ZSTDS/Stream/Abstract.html","","<p>ZSTDS::Stream::Abstract class.\n"],["ZSTDS::Stream::Delegates","","ZSTDS/Stream/Delegates.html","","<p>ZSTDS::Stream::Delegates module.\n"],["ZSTDS::Stream::Raw","","ZSTDS/Stream/Raw.html","",""],["ZSTDS::Stream::Raw::Abstract","","ZSTDS/Stream/Raw/Abstract.html","","<p>ZSTDS::Stream::Raw::Abstract class.\n"],["ZSTDS::Stream::Raw::Compressor","","ZSTDS/Stream/Raw/Compressor.html","","<p>ZSTDS::Stream::Raw::Compressor class.\n"],["ZSTDS::Stream::Raw::Decompressor","","ZSTDS/Stream/Raw/Decompressor.html","","<p>ZSTDS::Stream::Raw::Decompressor class.\n"],["ZSTDS::Stream::Reader","","ZSTDS/Stream/Reader.html","","<p>ZSTDS::Stream::Reader class.\n"],["ZSTDS::Stream::ReaderHelpers","","ZSTDS/Stream/ReaderHelpers.html","","<p>ZSTDS::Stream::ReaderHelpers module.\n"],["ZSTDS::Stream::ReaderHelpers::ClassMethods","","ZSTDS/Stream/ReaderHelpers/ClassMethods.html","","<p>ZSTDS::Stream::ReaderHelpers::ClassMethods module.\n"],["ZSTDS::Stream::Stat","","ZSTDS/Stream/Stat.html","","<p>ZSTDS::Stream::Stat class.\n"],["ZSTDS::Stream::Writer","","ZSTDS/Stream/Writer.html","","<p>ZSTDS::Stream::Writer class.\n"],["ZSTDS::Stream::WriterHelpers","","ZSTDS/Stream/WriterHelpers.html","","<p>ZSTDS::Stream::WriterHelpers module.\n"],["ZSTDS::Stream::WriterHelpers::ClassMethods","","ZSTDS/Stream/WriterHelpers/ClassMethods.html","","<p>ZSTDS::Stream::WriterHelpers::ClassMethods module.\n"],["ZSTDS::String","","ZSTDS/String.html","","<p>ZSTDS::String module.\n"],["ZSTDS::UnexpectedError","","ZSTDS/UnexpectedError.html","",""],["ZSTDS::UsedAfterCloseError","","ZSTDS/UsedAfterCloseError.html","",""],["ZSTDS::ValidateError","","ZSTDS/ValidateError.html","",""],["ZSTDS::Validation","","ZSTDS/Validation.html","","<p>ZSTDS::Validation module.\n"],["ZSTDS::WriteIOError","","ZSTDS/WriteIOError.html","",""],["<<","ZSTDS::Stream::WriterHelpers","ZSTDS/Stream/WriterHelpers.html#method-i-3C-3C","(object)",""],["advise","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-advise","()",""],["append_io_data","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-append_io_data","(io_data)","<p>– common –\n"],["close","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-close","()",""],["close","ZSTDS::Stream::Raw::Abstract","ZSTDS/Stream/Raw/Abstract.html#method-i-close","(&writer)",""],["close","ZSTDS::Stream::Raw::Compressor","ZSTDS/Stream/Raw/Compressor.html#method-i-close","(&writer)",""],["close","ZSTDS::Stream::Raw::Decompressor","ZSTDS/Stream/Raw/Decompressor.html#method-i-close","(&writer)",""],["close","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-close","()",""],["close","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-close","()",""],["close_nonblock","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-close_nonblock","(*options)",""],["closed?","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-closed-3F","()",""],["closed?","ZSTDS::Stream::Raw::Abstract","ZSTDS/Stream/Raw/Abstract.html#method-i-closed-3F","()",""],["compress","ZSTDS::File","ZSTDS/File.html#method-c-compress","(source, destination, options = {})",""],["compress","ZSTDS::String","ZSTDS/String.html#method-c-compress","(source, options = {})",""],["create_raw_stream","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-create_raw_stream","()",""],["create_raw_stream","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-create_raw_stream","()",""],["decompress","ZSTDS::File","ZSTDS/File.html#method-c-decompress","(source, destination, options = {})",""],["decompress","ZSTDS::String","ZSTDS/String.html#method-c-decompress","(source, options = {})",""],["do_not_use_after_close","ZSTDS::Stream::Raw::Abstract","ZSTDS/Stream/Raw/Abstract.html#method-i-do_not_use_after_close","()","<p>– close –\n"],["each","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-each","(&block)",""],["each_byte","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-each_byte","(&block)",""],["each_char","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-each_char","(&block)",""],["each_line","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-each_line","(&block)",""],["each_string","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-each_string","(each_proc, &block)",""],["empty?","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-empty-3F","()",""],["eof?","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-eof-3F","()",""],["finalize","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-finalize","(content, samples, options = {})",""],["finish","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-finish","(method_name)",""],["finish_nonblock","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-finish_nonblock","(method_name, *options)",""],["flush","ZSTDS::Stream::Raw::Abstract","ZSTDS/Stream/Raw/Abstract.html#method-i-flush","(&writer)","<p>– write –\n"],["flush","ZSTDS::Stream::Raw::Compressor","ZSTDS/Stream/Raw/Compressor.html#method-i-flush","(&writer)",""],["flush","ZSTDS::Stream::Raw::Decompressor","ZSTDS/Stream/Raw/Decompressor.html#method-i-flush","(&writer)",""],["flush","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-flush","()",""],["flush_io_data","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-flush_io_data","()",""],["flush_nonblock","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-flush_nonblock","(*options)",""],["get_compressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_compressor_options","(options, buffer_length_names)",""],["get_decompressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_decompressor_options","(options, buffer_length_names)",""],["getbyte","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-getbyte","()",""],["getc","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-getc","()","<p>– char –\n"],["gets","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-gets","(separator = $OUTPUT_RECORD_SEPARATOR, limit = nil)","<p>– lines –\n"],["header_size","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-i-header_size","()",""],["id","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-i-id","()",""],["included","ZSTDS::Stream::Delegates","ZSTDS/Stream/Delegates.html#method-c-included","(klass)",""],["included","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-c-included","(klass)",""],["included","ZSTDS::Stream::WriterHelpers","ZSTDS/Stream/WriterHelpers.html#method-c-included","(klass)",""],["initialize_source_buffer_length","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-initialize_source_buffer_length","()",""],["more_destination","ZSTDS::Stream::Raw::Abstract","ZSTDS/Stream/Raw/Abstract.html#method-i-more_destination","(&writer)",""],["new","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-new","(buffer)",""],["new","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-c-new","(io, options = {})",""],["new","ZSTDS::Stream::Raw::Abstract","ZSTDS/Stream/Raw/Abstract.html#method-c-new","(native_stream)",""],["new","ZSTDS::Stream::Raw::Compressor","ZSTDS/Stream/Raw/Compressor.html#method-c-new","(options = {})",""],["new","ZSTDS::Stream::Raw::Decompressor","ZSTDS/Stream/Raw/Decompressor.html#method-c-new","(options = {})",""],["new","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-c-new","(source_io, options = {}, *args)",""],["new","ZSTDS::Stream::Stat","ZSTDS/Stream/Stat.html#method-c-new","(stat)",""],["new","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-c-new","(destination_io, options = {}, *args)",""],["open","ZSTDS::Stream::ReaderHelpers::ClassMethods","ZSTDS/Stream/ReaderHelpers/ClassMethods.html#method-i-open","(file_path, *args, &block)",""],["open","ZSTDS::Stream::WriterHelpers::ClassMethods","ZSTDS/Stream/WriterHelpers/ClassMethods.html#method-i-open","(file_path, *args, &block)",""],["print","ZSTDS::Stream::WriterHelpers","ZSTDS/Stream/WriterHelpers.html#method-i-print","(*objects, field_separator: $OUTPUT_FIELD_SEPARATOR, record_separator: $OUTPUT_RECORD_SEPARATOR)",""],["printf","ZSTDS::Stream::WriterHelpers","ZSTDS/Stream/WriterHelpers.html#method-i-printf","(*args)",""],["process_set_encoding_arguments","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-process_set_encoding_arguments","(*args)",""],["putc","ZSTDS::Stream::WriterHelpers","ZSTDS/Stream/WriterHelpers.html#method-i-putc","(object, encoding: ::Encoding::BINARY)",""],["puts","ZSTDS::Stream::WriterHelpers","ZSTDS/Stream/WriterHelpers.html#method-i-puts","(*objects)",""],["raw_nonblock_wrapper","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-raw_nonblock_wrapper","(method_name, *args)",""],["raw_wrapper","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-raw_wrapper","(method_name, *args)",""],["raw_wrapper","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-raw_wrapper","(method_name, *args)",""],["read","ZSTDS::Stream::Raw::Decompressor","ZSTDS/Stream/Raw/Decompressor.html#method-i-read","(source, &writer)",""],["read","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-read","(bytes_to_read = nil, out_buffer = nil)","<p>– synchronous –\n"],["read_buffer","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-read_buffer","(out_buffer)",""],["read_bytes_from_buffer","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-read_bytes_from_buffer","(bytes_to_read, out_buffer)",""],["read_more_nonblock","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-read_more_nonblock","(bytes_to_read, out_buffer, &_block)",""],["read_nonblock","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-read_nonblock","(bytes_to_read, out_buffer = nil, *options)",""],["readbyte","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-readbyte","()",""],["readchar","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-readchar","()",""],["readline","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-readline","()",""],["readlines","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-readlines","()",""],["readpartial","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-readpartial","(bytes_to_read, out_buffer = nil)","<p>– asynchronous –\n"],["readstring","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-readstring","(each_proc)","<p>– common –\n"],["reset_buffer","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-reset_buffer","()","<p>– buffer –\n"],["reset_io_advise","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-reset_io_advise","()","<p>– advise –\n"],["reset_io_remainder","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-reset_io_remainder","()",""],["reset_need_to_flush","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-reset_need_to_flush","()",""],["rewind","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-rewind","()","<p>– etc –\n"],["rewind","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-rewind","()",""],["rewind","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-rewind","()",""],["rewind_nonblock","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-rewind_nonblock","(*options)",""],["set_encoding","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-set_encoding","(*args)","<p>– encoding –\n"],["set_target_encoding","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-set_target_encoding","(name, value)",""],["target_encoding","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-target_encoding","()",""],["to_io","ZSTDS::Stream::Abstract","ZSTDS/Stream/Abstract.html#method-i-to_io","()",""],["train","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-train","(samples, options = {})",""],["transcode","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-transcode","(data)","<p>– common –\n"],["transcode_to_external","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-transcode_to_external","(data)","<p>We should be able to return data back to buffer. We won’t use any transcode options because transcoded …\n"],["transcode_to_internal","ZSTDS::Stream::Reader","ZSTDS/Stream/Reader.html#method-i-transcode_to_internal","(data)",""],["ungetbyte","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-ungetbyte","(byte)",""],["ungetc","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-ungetc","(char)",""],["ungetline","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-ungetline","(line)",""],["ungetstring","ZSTDS::Stream::ReaderHelpers","ZSTDS/Stream/ReaderHelpers.html#method-i-ungetstring","(string)",""],["validate_array","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_array","(value)",""],["validate_bool","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_bool","(value)",""],["validate_hash","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_hash","(value)",""],["validate_integer","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_integer","(value)",""],["validate_not_negative_integer","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_not_negative_integer","(value)",""],["validate_positive_integer","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_positive_integer","(value)",""],["validate_proc","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_proc","(value)",""],["validate_samples","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-validate_samples","(samples)",""],["validate_string","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_string","(value)",""],["validate_symbol","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_symbol","(value)",""],["validate_write","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-validate_write","()",""],["validate_write_nonblock","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-validate_write_nonblock","()",""],["write","ZSTDS::Stream::Raw::Compressor","ZSTDS/Stream/Raw/Compressor.html#method-i-write","(source, &writer)",""],["write","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-write","(*objects)","<p>– synchronous –\n"],["write_nonblock","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-write_nonblock","(object, *options)","<p>IO write nonblock can raise wait writable error. After resolving this error user may provide same content …\n"],["write_remaining_buffer","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-write_remaining_buffer","()",""],["write_remaining_buffer_nonblock","ZSTDS::Stream::Writer","ZSTDS/Stream/Writer.html#method-i-write_remaining_buffer_nonblock","(*options)",""],["write_result","ZSTDS::Stream::Raw::Abstract","ZSTDS/Stream/Raw/Abstract.html#method-i-write_result","(&_writer)",""],["AUTHORS","","AUTHORS.html","","<p>Andrew Aladjev Ivan Takarlikov Jenner La Fave\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright © 2019 AUTHORS\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>Ruby bindings for zstd library\n<p>| AppVeyor | Jenkins | Github actions | Codecov | Gem |\n| :------: | :-----: ...\n"]]}}