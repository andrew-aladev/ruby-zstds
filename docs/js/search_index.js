var search_data = {"index":{"searchIndex":["zstds","accessioerror","allocateerror","baseerror","corrupteddictionaryerror","decompressorcorruptedsourceerror","dictionary","file","notenoughdestinationbuffererror","notenoughsourcebuffererror","option","readioerror","stream","raw","compressor","option","decompressor","option","reader","writer","string","option","validation","writeioerror","compress()","compress()","finalize()","get_compressor_options()","get_compressor_options()","get_compressor_options()","get_compressor_options()","get_decompressor_options()","get_decompressor_options()","get_decompressor_options()","get_decompressor_options()","header_size()","id()","native_compress_io()","native_compress_string()","native_decompress_io()","native_decompress_string()","new()","new()","train()","validate_bool()","validate_integer()","validate_samples()","authors","license","readme"],"longSearchIndex":["zstds","zstds::accessioerror","zstds::allocateerror","zstds::baseerror","zstds::corrupteddictionaryerror","zstds::decompressorcorruptedsourceerror","zstds::dictionary","zstds::file","zstds::notenoughdestinationbuffererror","zstds::notenoughsourcebuffererror","zstds::option","zstds::readioerror","zstds::stream","zstds::stream::raw","zstds::stream::raw::compressor","zstds::stream::raw::compressor::option","zstds::stream::raw::decompressor","zstds::stream::raw::decompressor::option","zstds::stream::reader","zstds::stream::writer","zstds::string","zstds::string::option","zstds::validation","zstds::writeioerror","zstds::file::compress()","zstds::string::compress()","zstds::dictionary::finalize()","zstds::option::get_compressor_options()","zstds::option::get_compressor_options()","zstds::option::get_compressor_options()","zstds::option::get_compressor_options()","zstds::option::get_decompressor_options()","zstds::option::get_decompressor_options()","zstds::option::get_decompressor_options()","zstds::option::get_decompressor_options()","zstds::dictionary#header_size()","zstds::dictionary#id()","zstds::file::native_compress_io()","zstds::string::native_compress_string()","zstds::file::native_decompress_io()","zstds::string::native_decompress_string()","zstds::dictionary::new()","zstds::stream::raw::compressor::new()","zstds::dictionary::train()","zstds::validation::validate_bool()","zstds::validation::validate_integer()","zstds::dictionary::validate_samples()","","",""],"info":[["ZSTDS","","ZSTDS.html","","<p>Ruby bindings for zstd library. Copyright © 2019 AUTHORS, MIT License.\n"],["ZSTDS::AccessIOError","","ZSTDS/AccessIOError.html","",""],["ZSTDS::AllocateError","","ZSTDS/AllocateError.html","",""],["ZSTDS::BaseError","","ZSTDS/BaseError.html","",""],["ZSTDS::CorruptedDictionaryError","","ZSTDS/CorruptedDictionaryError.html","",""],["ZSTDS::DecompressorCorruptedSourceError","","ZSTDS/DecompressorCorruptedSourceError.html","",""],["ZSTDS::Dictionary","","ZSTDS/Dictionary.html","","<p>ZSTDS::Dictionary class.\n"],["ZSTDS::File","","ZSTDS/File.html","","<p>ZSTDS::File class.\n"],["ZSTDS::NotEnoughDestinationBufferError","","ZSTDS/NotEnoughDestinationBufferError.html","",""],["ZSTDS::NotEnoughSourceBufferError","","ZSTDS/NotEnoughSourceBufferError.html","",""],["ZSTDS::Option","","ZSTDS/Option.html","","<p>ZSTDS::Option module.\n"],["ZSTDS::ReadIOError","","ZSTDS/ReadIOError.html","",""],["ZSTDS::Stream","","ZSTDS/Stream.html","",""],["ZSTDS::Stream::Raw","","ZSTDS/Stream/Raw.html","",""],["ZSTDS::Stream::Raw::Compressor","","ZSTDS/Stream/Raw/Compressor.html","","<p>ZSTDS::Stream::Raw::Compressor class.\n"],["ZSTDS::Stream::Raw::Compressor::Option","","ZSTDS/Option.html","","<p>ZSTDS::Option module.\n"],["ZSTDS::Stream::Raw::Decompressor","","ZSTDS/Stream/Raw/Decompressor.html","","<p>ZSTDS::Stream::Raw::Decompressor class.\n"],["ZSTDS::Stream::Raw::Decompressor::Option","","ZSTDS/Option.html","","<p>ZSTDS::Option module.\n"],["ZSTDS::Stream::Reader","","ZSTDS/Stream/Reader.html","","<p>ZSTDS::Stream::Reader class.\n"],["ZSTDS::Stream::Writer","","ZSTDS/Stream/Writer.html","","<p>ZSTDS::Stream::Writer class.\n"],["ZSTDS::String","","ZSTDS/String.html","","<p>ZSTDS::String class.\n"],["ZSTDS::String::Option","","ZSTDS/Option.html","","<p>ZSTDS::Option module.\n"],["ZSTDS::Validation","","ZSTDS/Validation.html","","<p>ZSTDS::Validation class.\n"],["ZSTDS::WriteIOError","","ZSTDS/WriteIOError.html","",""],["compress","ZSTDS::File","ZSTDS/File.html#method-c-compress","(source, destination, options = {})","<p>Compresses data from <code>source</code> file path to <code>destination</code> file path. Option: <code>:source_buffer_length</code> source …\n"],["compress","ZSTDS::String","ZSTDS/String.html#method-c-compress","(source, options = {})","<p>Compresses <code>source</code> string using <code>options</code>. Option: <code>:destination_buffer_length</code> destination buffer length. …\n"],["finalize","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-finalize","(content, samples, options = {})","<p>Finalizes dictionary. Uses <code>content</code> binary data. Uses <code>samples</code> list of binary datas. Uses <code>options</code> options …\n"],["get_compressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_compressor_options","(options, buffer_length_names)","<p>Processes compressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["get_compressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_compressor_options","(options, buffer_length_names)","<p>Processes compressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["get_compressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_compressor_options","(options, buffer_length_names)","<p>Processes compressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["get_compressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_compressor_options","(options, buffer_length_names)","<p>Processes compressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["get_decompressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_decompressor_options","(options, buffer_length_names)","<p>Processes decompressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["get_decompressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_decompressor_options","(options, buffer_length_names)","<p>Processes decompressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["get_decompressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_decompressor_options","(options, buffer_length_names)","<p>Processes decompressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["get_decompressor_options","ZSTDS::Option","ZSTDS/Option.html#method-c-get_decompressor_options","(options, buffer_length_names)","<p>Processes decompressor <code>options</code> and <code>buffer_length_names</code>. Option: <code>:source_buffer_length</code> source buffer length. …\n"],["header_size","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-i-header_size","()","<p>Returns current dictionary header size.\n"],["id","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-i-id","()","<p>Returns current dictionary id.\n"],["native_compress_io","ZSTDS::File","ZSTDS/File.html#method-c-native_compress_io","(*args)","<p>Bypass native compress.\n"],["native_compress_string","ZSTDS::String","ZSTDS/String.html#method-c-native_compress_string","(*args)","<p>Bypasses native compress.\n"],["native_decompress_io","ZSTDS::File","ZSTDS/File.html#method-c-native_decompress_io","(*args)","<p>Bypass native decompress.\n"],["native_decompress_string","ZSTDS::String","ZSTDS/String.html#method-c-native_decompress_string","(*args)","<p>Bypasses native decompress.\n"],["new","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-new","(buffer)","<p>Initializes compressor. Uses <code>buffer</code> binary data.\n"],["new","ZSTDS::Stream::Raw::Compressor","ZSTDS/Stream/Raw/Compressor.html#method-c-new","(options = {})","<p>Initializes compressor. Option: <code>:destination_buffer_length</code> destination buffer length. Option: <code>:pledged_size</code> …\n"],["train","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-train","(samples, options = {})","<p>Trains dictionary. Uses <code>samples</code> list of binary datas. Uses <code>options</code> options hash. Option <code>gvl</code> is global …\n"],["validate_bool","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_bool","(value)","<p>Raises error when <code>value</code> is not boolean.\n"],["validate_integer","ZSTDS::Validation","ZSTDS/Validation.html#method-c-validate_integer","(value)","<p>Raises error when <code>value</code> is not integer.\n"],["validate_samples","ZSTDS::Dictionary","ZSTDS/Dictionary.html#method-c-validate_samples","(samples)","<p>Raises error when <code>samples</code> are not list of not empty strings.\n"],["AUTHORS","","AUTHORS.html","","<p>Andrew Aladjev Ivan Takarlikov Jenner La Fave\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright © 2019 AUTHORS\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>Ruby bindings for zstd library\n<p>| AppVeyor | Jenkins | Github actions | Codecov | Gem |\n| :------: | :-----: ...\n"]]}}